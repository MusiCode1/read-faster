# Read Faster - כללי פרויקט

## מטרת הפרויקט
מערכת אינטרנטית לשיפור מיומנויות קריאה באמצעות הצגת מילים בכרטיסיות. המערכת מציגה מילים בעברית בסטים מוגדרים ועוקבת אחר התקדמות המשתמש.

## טכנולוגיות
- Svelte + TypeScript
- TailwindCSS לעיצוב
- Vitest לבדיקות

## מבנה הפרויקט
- `/src/routes` - עמודים וראוטינג של האפליקציה
- `/src/lib/components` - קומפוננטות משותפות
  - `/ui` - קומפוננטות UI בסיסיות
  - `/screens` - מסכים ראשיים
  - `/layout` - קומפוננטות מבנה
- `/documentation` - תיעוד טכני והסברים
- `/static` - קבצים סטטיים
- `/e2e` - בדיקות קצה לקצה

## כללי קוד
1. **שפה**
   - ממשק משתמש: עברית
   - קוד (שמות משתנים, פונקציות, קומפוננטות): אנגלית בלבד
   - הערות בקוד: עברית
   - תיעוד: עברית (בתיקיית documentation)

2. **TypeScript**
   - חובה להשתמש ב-TypeScript עבור קבצי לוגיקה
   - הגדרת טיפוסים ב-/src/lib/types/index.ts
   - שימוש ב-interface במקום type כברירת מחדל

3. **Svelte**
   > פירוט נוסף על כללי Svelte 5 ניתן למצוא ב-documentation/svelte5-rules.md
   - קומפוננטות במבנה SFC (Single File Component)
   - הפרדה בין קומפוננטות UI לקומפוננטות מסך
   - שימוש ב-runes במקום reactive declarations ($state, $derived, $effect)  
   - שימוש ב-snippets במקום slots
   - שימוש ב-props עם TypeScript interfaces
   - שימוש ב-event handlers כ-properties (onclick במקום on:click)
   - שימוש ב-$bindable עבור props שניתנים לשינוי
   - שימוש ב-stores עבור ניהול מצב גלובלי

4. **סגנון קוד**
   - שימוש ב-Prettier לפורמט אחיד
   - עמידה בכללי ESLint
   - שמות ברורים ותיאוריים באנגלית

5. **עיצוב**
   - חובה להשתמש בסכמת העיצוב המוגדרת ב-documentation/design-system.md
   - שימוש בצבעים, טיפוגרפיה, מרווחים ואנימציות כפי שמוגדר במסמך
   - שימוש ברכיבים מוכנים (כפתורים, קארדים וכו') לפי הדוגמאות במסמך

## תהליך עבודה עם Git

1. בסיום משימה:
   - יש לוודא עם המשתמש שהמשימה הושלמה באופן סופי
   - רק לאחר אישור המשתמש ניתן להמשיך לתהליך הקומיט

2. בדיקת שינויים לפני קומיט:
   ```bash
   git --no-pager diff
   ```

3. תיעוד השינויים:
   - יש לתעד כל שינוי משמעותי בקובץ `documentation/CHANGELOG.md`
   - השינויים מתועדים בסדר כרונולוגי הפוך - השינויים החדשים נוספים בתחילת הקובץ
   - מבנה התיעוד:
     ```markdown
     ## [תאריך]
     ### שינוי: [תיאור קצר]
     
     - **פירוט טכני**: [תיאור נרטיבי של השינויים הטכניים, כולל אזכור הקבצים שהשתנו]
     
     - **למה**: [הסבר הסיבה לשינוי]
     
     - **השפעות**: [תיאור ההשפעות על המערכת]
     ```

4. יש לוודא:
   - הודעת קומיט מפורטת בעברית
   - אם נעשה שינוי משמעותי (שינוי ארכיטקטורה, הוספת פיצ'ר חדש, שינוי התנהגות), יש להוסיף תיעוד מתאים בתיקיית documentation

## דרישות טכניות נוספות
- תמיכה ב-RTL
- גופן Frank Ruhl Libre לתמיכה בניקוד
- גודל גופן מינימלי 48px למילים מנוקדות
- שמירת מצב במקומי (localStorage)
